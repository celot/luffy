(function($) {	
	$.validator.addMethod('IP4Checker', function(value, element) {
		var ip = /^(\d|[1-9]\d|1\d\d|2([0-4]\d|5[0-5]))\.(\d|[1-9]\d|1\d\d|2([0-4]\d|5[0-5]))\.(\d|[1-9]\d|1\d\d|2([0-4]\d|5[0-5]))\.(\d|[1-9]\d|1\d\d|2([0-4]\d|5[0-5]))$/;	 
		return this.optional(element) || value.match(ip);
	});

	$.validator.addMethod('IpOrUrlChecker', function(value, element) {
		if(this.optional(element)) return true;

		// var url =  /^(http(s)?:\/\/)?(www\.)?[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}(:[0-9]{1,5})?(\/.*)?$/;
		var url = /^((([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]))*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]))$/;
		var ip = /^(\d|[1-9]\d|1\d\d|2([0-4]\d|5[0-5]))\.(\d|[1-9]\d|1\d\d|2([0-4]\d|5[0-5]))\.(\d|[1-9]\d|1\d\d|2([0-4]\d|5[0-5]))\.(\d|[1-9]\d|1\d\d|2([0-4]\d|5[0-5]))$/;

		return value.match(ip) || value.match(url);
	});	

	$.validator.addMethod('Netmask', function(value, element) {
		if(this.optional(element)) return true;

		var correct_range = {'128': 1, '192': 1, '224': 1, '240': 1, '248': 1, '252': 1, '254': 1, '255': 1, '0':1};  
		var m = value.split('.');  
		for (var i = 0; i <= 3; i ++) {  
			if (!(m[i] in correct_range)) {  
				return false;  
			}  
		}  

		if (m[0] == 0) return false; 
		/*
		if ((m[0] != 255 && m[1] != 0) || (m[1] != 255 && m[2] != 0) || (m[2] != 255 && m[3] != 0)) return false;  
		*/
		return true; 
	});

	$.validator.addMethod('MACChecker', function(value, element, param) {
		if(this.optional(element)) return true;
		var isMatched = false;
		$.each(param, function(index, item){
			if(item.toUpperCase() == value.toUpperCase()) {
				isMatched = true;
				return false;
			}
		});
		if(isMatched) return false;
		var mac = "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$";
		return value.match(mac);
	});

	$.validator.addMethod("hexString", function(value, element, param) {
		if(this.optional(element)) return true;
		var lenx=0;
		for (var i = 0; i < value.length; ++i) 
		{ 
			var c = value.charCodeAt(i);        
			if ( (c >= 0x30 && c <= 0x39) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66))  lenx++;
			else return false;
		} 
		if(lenx != param) return false;
		return true;
	});


	$.validator.setDefaults({
		highlight : function(element) {
			$(element).removeClass('success').addClass('error');
		},
		success : function(element) {
			$(element).removeClass('error').addClass('success');
		},
		errorPlacement : function(error, element) {}
	});		

	$.tr = function(key){
		var butterlate = new Butterlation();
		butterlate.setTextDomain("default");
		var  retval =  butterlate.gettext(key);
		return retval;
	}	

	// Must be below $.tr function.
	$.validator.addMethod("notEqualTo", function(value, element, param) {
		//var validator = this;
		//validator.messages.required = "111456";	
		return this.optional(element) || value != $(param).val();
	}, $.tr("jquery msg report port and remote port same"));

	// Must be below $.tr function.
	$.validator.addMethod("maxString", function(value, element, param) {
		if(this.optional(element)) return true;
		var len=0;
		for (var i = 0; i < value.length; ++i) 
		{ 
			var c = value.charCodeAt(i);        
			if ( (c >= 0x0 && c < 0x81) || (c == 0xf8f0) || (c >= 0xff61 && c < 0xffa0) || (c >= 0xf8f1 && c < 0xf8f4))  len++;
			else len+=2;
		} 
		if(len > param) return false;
		return true;
	});


	$.fn.initForm = function(args) {
		var i = 0;
		return this.each(function() {
			if(i<args.length) 
			{
				var type = this.type, tag = this.tagName.toLowerCase();
				if (tag == 'form')  return $(':input',this).initForm(args);
				if (type == 'text' || type == 'password' || tag == 'textarea')
				{
					this.value = args[i];
				}
				else if (type == 'checkbox' || type == 'radio')
				{
					this.value = args[i];
					if(args[i]=='0')
					{
						this.checked = false; 
					}
					else
					{
						this.checked = true; 
					}
				}
				else if (tag == 'select') 
				{
					this.value = args[i];
					this.selectedIndex = parseInt(args[i]);
				}
				i++;
			}
		});
	};

	$.validator.addMethod('HexChecker', function(value, element) {
		var hex = "^[0-9a-fA-F]*$";
		return this.optional(element) || value.match(hex);
	});

	$.validator.addMethod('MustLengthEven', function(value, element) {
		if(this.optional(element)) return true;
		
		return (value.length%2 == 0);
	});
	
}(jQuery));

jQuery.expr[':'].regex = function(elem, index, match) {
	var matchParams = match[3].split(','),
		validLabels = /^(data|css):/,
		attr = {
			method: matchParams[0].match(validLabels) ? 
			            matchParams[0].split(':')[0] : 'attr',
			property: matchParams.shift().replace(validLabels,'')
		},
		regexFlags = 'ig',
		regex = new RegExp(matchParams.join('').replace(/^\s+|\s+$/g,''), regexFlags);

	return regex.test(jQuery(elem)[attr.method](attr.property));
}


